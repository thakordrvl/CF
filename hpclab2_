#include <stdio.h>
#include <omp.h>
#include <time.h>
#include <stdlib.h>

#define min(x, y) (((x) < (y)) ? (x) : (y))
// Using the MONOTONIC clock
#define CLK CLOCK_MONOTONIC

/* Function to compute the difference between two points in time */
struct timespec diff(struct timespec start, struct timespec end);

/*
   Function to computes the difference between two time instances

   Taken from - http://www.guyrutenberg.com/2007/09/22/profiling-code-using-clock_gettime/

   Further reading:
   http://stackoverflow.com/questions/6749621/how-to-create-a-high-resolution-timer-in-linux-to-measure-program-performance
   http://stackoverflow.com/questions/3523442/difference-between-clock-realtime-and-clock-monotonic
 */
struct timespec diff(struct timespec start, struct timespec end) {
    struct timespec temp;
    if ((end.tv_nsec - start.tv_nsec) < 0) {
        temp.tv_sec = end.tv_sec - start.tv_sec - 1;
        temp.tv_nsec = 1000000000 + end.tv_nsec - start.tv_nsec;
    } else {
        temp.tv_sec = end.tv_sec - start.tv_sec;
        temp.tv_nsec = end.tv_nsec - start.tv_nsec;
    }
    return temp;
}

// Function to merge two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(double arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temporary arrays
    double L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temporary arrays back into arr[l..r]
    i = 0;     // Initial index of first subarray
    j = 0;     // Initial index of second subarray
    k = l;    // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Main function to perform merge sort on arr[l..r]
void mergeSort(double arr[], int l, int r) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and r
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Merge the sorted halves
        merge(arr, l, m, r);
    }
}

int main(int argc, char *argv[]) {
    // INPUT
    struct timespec start_e2e, end_e2e, start_alg, end_alg, e2e, alg;
    /* Should start before anything else */
    clock_gettime(CLK, &start_e2e);

    /* Check if enough command-line arguments are taken in. */
    if (argc < 2) {
        printf("Usage: %s n\n", argv[0]);
        return -1;
    }

    int N = atoi(argv[1]); /* size of input array */
    char *problem_name = "merge_sort";
    char *approach_name = "serial";
    // char buffer[10];
    // FILE* inputFile;
    FILE *outputFile;
    // inputFile = fopen(argv[3],"r");

    char outputFileName[50];
    sprintf(outputFileName, "output/%s_%s_%s_output.txt", problem_name, approach_name, argv[1]);

    /*----------------INPUT/OUPUT operations start here-----------------------------*/
    // Declare and initialize other variables within the INPUT section
    // For example:
    double *arr = (double *)malloc(N * sizeof(double));
    int i = 0;

    // Initialize array with some values (you can modify this based on your requirements)
    for (i = 0; i < N; ++i) {
        arr[i] = rand() % 100; // Modify this based on your input values
    }

    /*----------------INPUT/OUPUT operations end here-----------------------------*/

    clock_gettime(CLK, &start_alg); /* Start the algo timer */

    /*----------------------Core algorithm starts here----------------------------------------------*/
    // Perform merge sort on the array
    mergeSort(arr, 0, N - 1);
    /*----------------------Core algorithm finished--------------------------------------------------*/

    clock_gettime(CLK, &end_alg); /* End the algo timer */
    /* Ensure that only the algorithm is present between these two
       timers. Further, the whole algorithm should be present. */

    /* Should end before anything else (printing comes later) */
    clock_gettime(CLK, &end_e2e);
    e2e = diff(start_e2e, end_e2e);
    alg = diff(start_alg, end_alg);

    // OUTPUT
    /* problem_name,approach_name,n,p,e2e_sec,e2e_nsec,alg_sec,alg_nsec
       Change problem_name to whatever problem you've been assigned
       Change approach_name to whatever approach has been assigned
       p should be 0 for serial codes!!
     */
    printf("%s,%s,%d,0,%d,%ld,%d,%ld\n", problem_name, approach_name, N, e2e.tv_sec, e2e.tv_nsec, alg.tv_sec, alg.tv_nsec);

    // Additional OUTPUT operations
    // For example, writing the sorted array to a file
    // outputFile = fopen(outputFileName, "w");
    // if (outputFile == NULL) {
    //     perror("Error opening output file");
    //     return -1;
    // }
    // for (int i = 0; i < N; ++i) {
    //     fprintf(outputFile, "%lf ", arr[i]);
    // }
    // fclose(outputFile);

    // Free allocated memory
    free(arr);

    return 0;
}
